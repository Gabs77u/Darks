#!/bin/bash
# Script para criar issues detalhadas no GitHub via GitHub CLI

gh issue create --title "Implementar logs e tratamento de exceções em todos os módulos" --body "## Contexto\nAtualmente, diversos métodos em wireguard/manager.py, proxies/proxy_manager.py, gui/privacy_config.py, gui/network_monitor_helpers.py, gui/main_window.py e outros arquivos utilizam apenas 'pass' em blocos de exceção, sem registrar logs ou fornecer feedback ao usuário.\n\n## Objetivo\nSubstituir todos os blocos 'pass' por logs detalhados e tratamento de exceções apropriado, garantindo rastreabilidade e melhor experiência para o usuário.\n\n## Critérios de Aceitação\n- Todos os blocos de exceção devem registrar o erro (ex: logging.error/exceptions).\n- Mensagens de erro amigáveis para o usuário final na interface gráfica.\n- Logs centralizados e acessíveis para troubleshooting.\n- Adicionar exemplos de logs no README.\n\n## Exemplo\nAntes:\n    except Exception as e:\n        pass\nDepois:\n    except Exception as e:\n        logging.error(f'Erro ao iniciar túnel: {e}')\n        mostrar_mensagem_erro_usuario('Falha ao iniciar o túnel. Verifique os logs.')\n\n## Referências\n- https://docs.python.org/3/library/logging.html\n- https://realpython.com/python-logging/\n" --label "backend,bug,refatoração,logs"

gh issue create --title "Expor funcionalidades do backend via API REST padronizada" --body "## Contexto\nNem todas as operações críticas do backend (proxies, wireguard, configurações, logs) estão expostas via API REST, dificultando a integração com a interface gráfica e automações.\n\n## Objetivo\nExpor todas as funcionalidades essenciais do backend por meio de endpoints RESTful, seguindo boas práticas de versionamento, autenticação e documentação.\n\n## Critérios de Aceitação\n- Endpoints REST para cada funcionalidade (proxies, wireguard, configs, logs).\n- Autenticação JWT ou OAuth2 implementada.\n- Documentação Swagger/OpenAPI publicada.\n- Testes automatizados para cada endpoint.\n\n## Exemplo\nGET /api/v1/proxies\nPOST /api/v1/wireguard/start\n\n## Referências\n- https://fastapi.tiangolo.com/\n- https://swagger.io/specification/\n" --label "backend,api,feature,documentação"

gh issue create --title "Refatorar GUI para consumir API REST do backend" --body "## Contexto\nA interface gráfica atualmente depende de lógica local e não consome de forma padronizada a API REST do backend, dificultando manutenção e escalabilidade.\n\n## Objetivo\nRefatorar a GUI para que todas as operações (status, logs, configurações, start/stop serviços) sejam realizadas via chamadas à API REST, com feedback visual e tratamento de erros.\n\n## Critérios de Aceitação\n- Todas as ações da GUI devem ser refletidas via chamadas à API.\n- Feedback visual para operações assíncronas e erros.\n- Testes manuais e automatizados de integração.\n- Documentação de exemplos de uso da API na GUI.\n\n## Exemplo\nAo clicar em 'Iniciar VPN', a GUI faz POST /api/v1/wireguard/start e exibe o status retornado.\n\n## Referências\n- https://realpython.com/python-pyqt-rest-api/\n" --label "frontend,api,feature,ux"

gh issue create --title "Automatizar testes unitários e de integração para todos os módulos" --body "## Contexto\nA cobertura de testes unitários e de integração é limitada, especialmente para fluxos críticos e integração entre backend e frontend.\n\n## Objetivo\nAmpliar a cobertura de testes unitários para todos os módulos e criar testes de integração entre backend e frontend, garantindo robustez e facilitando refatorações futuras.\n\n## Critérios de Aceitação\n- Cobertura mínima de 80% dos módulos críticos.\n- Testes de integração simulando fluxos reais (ex: start/stop VPN, upload de proxy).\n- Testes automatizados no CI/CD.\n- Relatórios de cobertura disponíveis.\n\n## Referências\n- https://docs.pytest.org/\n- https://coverage.readthedocs.io/\n" --label "testes,ci,feature,qualidade"

gh issue create --title "Implementar testes E2E para fluxos críticos do usuário" --body "## Contexto\nNão há testes end-to-end (E2E) cobrindo fluxos reais do usuário, como interação GUI ↔ backend, o que pode ocultar bugs de integração.\n\n## Objetivo\nCriar testes E2E que simulem o uso real do sistema, garantindo que todas as camadas estejam integradas e funcionais.\n\n## Critérios de Aceitação\n- Testes E2E cobrindo os principais fluxos do usuário (ex: iniciar VPN, configurar proxy, logs).\n- Execução automatizada dos testes.\n- Relatórios de falhas acessíveis.\n\n## Ferramentas sugeridas\n- Selenium\n- PyAutoGUI\n- Playwright\n\n## Referências\n- https://playwright.dev/python/\n- https://www.selenium.dev/documentation/\n" --label "testes,e2e,feature,qualidade"

gh issue create --title "Mockar dependências externas nos testes automatizados" --body "## Contexto\nTestes que dependem de infraestrutura externa (ex: SFTP, FTPS) podem falhar por falta de ambiente, prejudicando a automação e o CI/CD.\n\n## Objetivo\nModificar testes para utilizar mocks em vez de dependências externas, tornando-os independentes do ambiente.\n\n## Critérios de Aceitação\n- Testes não falham por falta de infraestrutura externa.\n- Uso de bibliotecas de mock (ex: unittest.mock, pytest-mock).\n- Documentação de como rodar os testes localmente e no CI.\n\n## Referências\n- https://docs.python.org/3/library/unittest.mock.html\n- https://pytest-mock.readthedocs.io/\n" --label "testes,infra,refatoração,ci"

gh issue create --title "Documentar endpoints, fluxos, deploy e troubleshooting" --body "## Contexto\nA documentação do projeto está incompleta ou desatualizada, dificultando onboarding, manutenção e troubleshooting.\n\n## Objetivo\nAtualizar e expandir a documentação do projeto, incluindo endpoints da API, fluxos da GUI, processos de deploy e troubleshooting.\n\n## Critérios de Aceitação\n- Documentação clara e acessível para novos colaboradores.\n- Exemplos de uso para cada endpoint.\n- Guia de deploy e troubleshooting atualizado.\n- Documentação versionada junto ao código.\n\n## Referências\n- https://www.mkdocs.org/\n- https://swagger.io/tools/swagger-ui/\n" --label "documentação,feature,onboarding"

gh issue create --title "Implementar autenticação/autorização robusta na API" --body "## Contexto\nA API não possui autenticação/autorização robusta, expondo endpoints críticos a acessos não autorizados.\n\n## Objetivo\nAdicionar autenticação JWT ou OAuth2 e garantir autorização adequada para cada endpoint, protegendo dados sensíveis e operações críticas.\n\n## Critérios de Aceitação\n- Endpoints protegidos por autenticação.\n- Fluxo de login/logout funcional.\n- Testes de segurança automatizados.\n- Documentação do fluxo de autenticação.\n\n## Referências\n- https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/\n- https://jwt.io/\n" --label "backend,api,segurança,feature"

gh issue create --title "Garantir armazenamento seguro de segredos e configurações sensíveis" --body "## Contexto\nSenhas, chaves e configurações sensíveis podem estar hardcoded ou expostas em arquivos não protegidos, representando risco de segurança.\n\n## Objetivo\nRevisar o armazenamento de segredos, utilizando variáveis de ambiente, arquivos .env ou gerenciadores de segredos, e documentar o processo seguro de configuração.\n\n## Critérios de Aceitação\n- Nenhum segredo hardcoded no código.\n- Uso de arquivos .env ou gerenciadores de segredos.\n- Documentação de configuração segura.\n- Auditoria de segurança aprovada.\n\n## Referências\n- https://12factor.net/pt_br/config\n- https://pypi.org/project/python-dotenv/\n" --label "segurança,infra,feature,configuração"
